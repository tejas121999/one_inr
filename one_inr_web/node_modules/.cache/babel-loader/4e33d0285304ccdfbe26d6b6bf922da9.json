{"ast":null,"code":"// import * as React from \"react\";\n// import PropTypes from \"prop-types\";\n// import Box from \"@mui/material/Box\";\n// import Table from \"@mui/material/Table\";\n// import TableBody from \"@mui/material/TableBody\";\n// import TableCell from \"@mui/material/TableCell\";\n// import TableContainer from \"@mui/material/TableContainer\";\n// import TableHead from \"@mui/material/TableHead\";\n// import TablePagination from \"@mui/material/TablePagination\";\n// import TableRow from \"@mui/material/TableRow\";\n// import TableSortLabel from \"@mui/material/TableSortLabel\";\n// import Paper from \"@mui/material/Paper\";\n// import { visuallyHidden } from \"@mui/utils\";\n// // import { makeStyles, useTheme } from '@material-ui/core/styles';\n// // import \"./Donor.css\";\n// // import axios from \"axios\";\n// import { useHistory } from \"react-router-dom\";\n// // import Loader from \"../Loader\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// // import {\n// //   EnhancedTableHead,\n// //   getComparator,\n// //   stableSort,\n// // } from \"../../components/pagination\";\n// import { EnhancedTableHead, getComparator, stableSort } from \"../Pagination\";\n// export default function EnhancedTable() {\n//   const [order, setOrder] = React.useState(\"asc\");\n//   const [orderBy, setOrderBy] = React.useState(\"calories\");\n//   const [selected, setSelected] = React.useState([]);\n//   const [page, setPage] = React.useState(0);\n//   const [dense, setDense] = React.useState(false);\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\n//   const [viewModal, setViewModal] = React.useState(false);\n//   const [viewData, setViewData] = React.useState(\"\");\n//   const [fundModal, setFundModal] = React.useState(false);\n//   const [fundModalData, setFundModalData] = React.useState(0);\n//   // const [donorList, setDonorList] = React.useState([]);\n//   const [deleteModal, setDeleteModal] = React.useState(false);\n//   const [deleteId, setDeleteID] = React.useState(0);\n//   const history = useHistory();\n//   // const dispatch = useDispatch();\n//   // React.useEffect(() => {\n//   //   dispatch(getViewAllDonorAction());\n//   // }, []);\n//   const donorList = useSelector((state) => state.donor.ViewAllDonor);\n//   const ViewModalOpen = (data) => {\n//     setViewData(data);\n//     setViewModal(true);\n//   };\n//   const ViewModalClose = () => {\n//     setViewModal(false);\n//   };\n//   const fundModaOpen = (data) => {\n//     setFundModalData(data.id);\n//     setFundModal(true);\n//   };\n//   const fundModaClose = () => {\n//     setFundModal(false);\n//   };\n//   const deleteModalOpen = (data) => {\n//     setDeleteID(data.id);\n//     setDeleteModal(true);\n//   };\n//   const deleteModalClose = () => {\n//     setDeleteModal(false);\n//   };\n//   const handleRequestSort = (event, property) => {\n//     const isAsc = orderBy === property && order === \"asc\";\n//     setOrder(isAsc ? \"desc\" : \"asc\");\n//     setOrderBy(property);\n//   };\n//   const handleChangePage = (event, newPage) => {\n//     console.log(\"ChinmayChange\", newPage);\n//     setPage(newPage);\n//   };\n//   const handleChangeRowsPerPage = (event) => {\n//     setRowsPerPage(parseInt(event.target.value, 10));\n//     setPage(0);\n//   };\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\n//   // Avoid a layout jump when reaching the last page with empty rows.\n//   const emptyRows =\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - donorList.length) : 0;\n//   // SEARCH\n//   let timeout = null;\n//   const handleChange = (e) => {\n//     clearTimeout(timeout);\n//     timeout = setTimeout(function () {\n//       // onSearch(e.target.value);\n//     }, 1000);\n//   };\n//   // const onSearch = (value) => {\n//   //   if (value) {\n//   //     dispatch(getDonorByValueAction(value));\n//   //   } else {\n//   //     dispatch(getViewAllDonorAction());\n//   //   }\n//   // };\n//   // END\n//   return (\n//     <>\n//       <br />\n//       <br />\n//       <br />\n//       <br />\n//       <div className=\"card\">\n//         <p\n//           style={{\n//             textAlign: \"left\",\n//             fontWeight: \"bold\",\n//             margin: \"20px\",\n//             width: \"100%\",\n//             marginLeft: \"20px\",\n//           }}\n//         >\n//           DONOR DETAIL\n//         </p>\n//       </div>\n//       <div\n//         style={{\n//           margin: \"20px\",\n//           backgroundColor: \"white\",\n//         }}\n//       >\n//         <div\n//           style={{\n//             display: \"flex\",\n//             padding: \"20px\",\n//             justifyContent: \"space-between\",\n//           }}\n//         >\n//           <input placeholder=\"Search\" onChange={(e) => handleChange(e)} />\n//         </div>\n//         <Paper sx={{ width: \"100%\", mb: 2 }}>\n//           {donorList && donorList.length > 0 ? (\n//             <React.Fragment>\n//               <TableContainer>\n//                 <Table\n//                   sx={{ minWidth: 750 }}\n//                   aria-labelledby=\"tableTitle\"\n//                   size={dense ? \"small\" : \"medium\"}\n//                 >\n//                   <EnhancedTableHead\n//                     numSelected={selected.length}\n//                     order={order}\n//                     orderBy={orderBy}\n//                     onRequestSort={handleRequestSort}\n//                     rowCount={donorList.length}\n//                     headCells={headCells}\n//                   />\n//                   <TableBody>\n//                     {stableSort(donorList, getComparator(order, orderBy))\n//                       .slice(\n//                         page * rowsPerPage,\n//                         page * rowsPerPage + rowsPerPage\n//                       )\n//                       .map((row, index) => {\n//                         const isItemSelected = isSelected(row.name);\n//                         const labelId = `enhanced-table-checkbox-${index}`;\n//                         return (\n//                           <TableRow\n//                             hover\n//                             aria-checked={isItemSelected}\n//                             tabIndex={-1}\n//                             key={row.name}\n//                             selected={isItemSelected}\n//                           >\n//                             <TableCell\n//                               id={labelId}\n//                               align=\"center\"\n//                               scope=\"row\"\n//                               padding=\"none\"\n//                             >\n//                               {row.name}\n//                             </TableCell>\n//                             <TableCell align=\"center\">\n//                               {row.donated ? row.donated : \"100\"}\n//                             </TableCell>\n//                             <TableCell align=\"center\">{row.balance}</TableCell>\n//                             <TableCell align=\"center\">\n//                               {row.project ? row.projects : \"20\"}\n//                             </TableCell>\n//                             <TableCell align=\"center\">\n//                               {/* <button\n//                                 data-bs-toggle=\"tooltip\"\n//                                 title=\"View Details\"\n//                                 className=\"btn\"\n//                                 onClick={() => ViewModalOpen(row)}\n//                               >\n//                                 <FaRegEye />\n//                               </button> */}\n//                               <button\n//                                 data-bs-toggle=\"tooltip\"\n//                                 title=\"Edit\"\n//                                 className=\"btn\"\n//                                 onClick={() => history.push(\"/edit_doner\", row)}\n//                               >\n//                                 {/* <FaRegEdit /> */}Home\n//                               </button>\n//                             </TableCell>\n//                           </TableRow>\n//                         );\n//                       })}\n//                   </TableBody>\n//                 </Table>\n//               </TableContainer>\n//               <TablePagination\n//                 rowsPerPageOptions={[5, 10, 25]}\n//                 component=\"div\"\n//                 count={donorList.length}\n//                 rowsPerPage={rowsPerPage}\n//                 page={page}\n//                 pageSize={10}\n//                 onPageChange={handleChangePage}\n//                 onRowsPerPageChange={handleChangeRowsPerPage}\n//                 showLastButton={true}\n//                 showFirstButton={true}\n//               />\n//             </React.Fragment>\n//           ) : (\n//             \"\"\n//           )}\n//         </Paper>\n//       </div>\n//     </>\n//   );\n// }\n// const headCells = [\n//   {\n//     id: \"name\",\n//     numeric: false,\n//     disablePadding: false,\n//     label: \"Name\",\n//   },\n//   {\n//     id: \"donated\",\n//     numeric: true,\n//     disablePadding: false,\n//     label: \"Donated\",\n//   },\n//   {\n//     id: \"balance\",\n//     numeric: true,\n//     disablePadding: false,\n//     label: \"Balance\",\n//   },\n//   {\n//     id: \"projects\",\n//     numeric: true,\n//     disablePadding: false,\n//     label: \"Projects\",\n//   },\n//   {\n//     id: \"action\",\n//     numeric: true,\n//     disablePadding: false,\n//     label: \"Action\",\n//   },\n// ];","map":{"version":3,"sources":["C:/Users/pravi/OneDrive/Desktop/one_inr/one_inr_web/src/Components/Home/home.js"],"names":[],"mappingssourcesContent":["// import * as React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n// import Box from \"@mui/material/Box\";\r\n// import Table from \"@mui/material/Table\";\r\n// import TableBody from \"@mui/material/TableBody\";\r\n// import TableCell from \"@mui/material/TableCell\";\r\n// import TableContainer from \"@mui/material/TableContainer\";\r\n// import TableHead from \"@mui/material/TableHead\";\r\n// import TablePagination from \"@mui/material/TablePagination\";\r\n// import TableRow from \"@mui/material/TableRow\";\r\n// import TableSortLabel from \"@mui/material/TableSortLabel\";\r\n// import Paper from \"@mui/material/Paper\";\r\n// import { visuallyHidden } from \"@mui/utils\";\r\n// // import { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\n// // import \"./Donor.css\";\r\n// // import axios from \"axios\";\r\n// import { useHistory } from \"react-router-dom\";\r\n\r\n// // import Loader from \"../Loader\";\r\n// import { useDispatch, useSelector } from \"react-redux\";\r\n// // import {\r\n// //   EnhancedTableHead,\r\n// //   getComparator,\r\n// //   stableSort,\r\n// // } from \"../../components/pagination\";\r\n// import { EnhancedTableHead, getComparator, stableSort } from \"../Pagination\";\r\n// export default function EnhancedTable() {\r\n//   const [order, setOrder] = React.useState(\"asc\");\r\n//   const [orderBy, setOrderBy] = React.useState(\"calories\");\r\n//   const [selected, setSelected] = React.useState([]);\r\n//   const [page, setPage] = React.useState(0);\r\n//   const [dense, setDense] = React.useState(false);\r\n//   const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n//   const [viewModal, setViewModal] = React.useState(false);\r\n//   const [viewData, setViewData] = React.useState(\"\");\r\n//   const [fundModal, setFundModal] = React.useState(false);\r\n//   const [fundModalData, setFundModalData] = React.useState(0);\r\n//   // const [donorList, setDonorList] = React.useState([]);\r\n//   const [deleteModal, setDeleteModal] = React.useState(false);\r\n//   const [deleteId, setDeleteID] = React.useState(0);\r\n//   const history = useHistory();\r\n//   // const dispatch = useDispatch();\r\n//   // React.useEffect(() => {\r\n//   //   dispatch(getViewAllDonorAction());\r\n//   // }, []);\r\n\r\n//   const donorList = useSelector((state) => state.donor.ViewAllDonor);\r\n\r\n//   const ViewModalOpen = (data) => {\r\n//     setViewData(data);\r\n//     setViewModal(true);\r\n//   };\r\n//   const ViewModalClose = () => {\r\n//     setViewModal(false);\r\n//   };\r\n//   const fundModaOpen = (data) => {\r\n//     setFundModalData(data.id);\r\n//     setFundModal(true);\r\n//   };\r\n//   const fundModaClose = () => {\r\n//     setFundModal(false);\r\n//   };\r\n//   const deleteModalOpen = (data) => {\r\n//     setDeleteID(data.id);\r\n//     setDeleteModal(true);\r\n//   };\r\n//   const deleteModalClose = () => {\r\n//     setDeleteModal(false);\r\n//   };\r\n//   const handleRequestSort = (event, property) => {\r\n//     const isAsc = orderBy === property && order === \"asc\";\r\n//     setOrder(isAsc ? \"desc\" : \"asc\");\r\n//     setOrderBy(property);\r\n//   };\r\n\r\n//   const handleChangePage = (event, newPage) => {\r\n//     console.log(\"ChinmayChange\", newPage);\r\n\r\n//     setPage(newPage);\r\n//   };\r\n\r\n//   const handleChangeRowsPerPage = (event) => {\r\n//     setRowsPerPage(parseInt(event.target.value, 10));\r\n//     setPage(0);\r\n//   };\r\n\r\n//   const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n//   // Avoid a layout jump when reaching the last page with empty rows.\r\n//   const emptyRows =\r\n//     page > 0 ? Math.max(0, (1 + page) * rowsPerPage - donorList.length) : 0;\r\n//   // SEARCH\r\n//   let timeout = null;\r\n//   const handleChange = (e) => {\r\n//     clearTimeout(timeout);\r\n//     timeout = setTimeout(function () {\r\n//       // onSearch(e.target.value);\r\n//     }, 1000);\r\n//   };\r\n\r\n//   // const onSearch = (value) => {\r\n//   //   if (value) {\r\n//   //     dispatch(getDonorByValueAction(value));\r\n//   //   } else {\r\n//   //     dispatch(getViewAllDonorAction());\r\n//   //   }\r\n//   // };\r\n\r\n//   // END\r\n//   return (\r\n//     <>\r\n//       <br />\r\n//       <br />\r\n//       <br />\r\n//       <br />\r\n//       <div className=\"card\">\r\n//         <p\r\n//           style={{\r\n//             textAlign: \"left\",\r\n//             fontWeight: \"bold\",\r\n//             margin: \"20px\",\r\n//             width: \"100%\",\r\n//             marginLeft: \"20px\",\r\n//           }}\r\n//         >\r\n//           DONOR DETAIL\r\n//         </p>\r\n//       </div>\r\n//       <div\r\n//         style={{\r\n//           margin: \"20px\",\r\n//           backgroundColor: \"white\",\r\n//         }}\r\n//       >\r\n//         <div\r\n//           style={{\r\n//             display: \"flex\",\r\n//             padding: \"20px\",\r\n//             justifyContent: \"space-between\",\r\n//           }}\r\n//         >\r\n//           <input placeholder=\"Search\" onChange={(e) => handleChange(e)} />\r\n//         </div>\r\n//         <Paper sx={{ width: \"100%\", mb: 2 }}>\r\n//           {donorList && donorList.length > 0 ? (\r\n//             <React.Fragment>\r\n//               <TableContainer>\r\n//                 <Table\r\n//                   sx={{ minWidth: 750 }}\r\n//                   aria-labelledby=\"tableTitle\"\r\n//                   size={dense ? \"small\" : \"medium\"}\r\n//                 >\r\n//                   <EnhancedTableHead\r\n//                     numSelected={selected.length}\r\n//                     order={order}\r\n//                     orderBy={orderBy}\r\n//                     onRequestSort={handleRequestSort}\r\n//                     rowCount={donorList.length}\r\n//                     headCells={headCells}\r\n//                   />\r\n//                   <TableBody>\r\n//                     {stableSort(donorList, getComparator(order, orderBy))\r\n//                       .slice(\r\n//                         page * rowsPerPage,\r\n//                         page * rowsPerPage + rowsPerPage\r\n//                       )\r\n//                       .map((row, index) => {\r\n//                         const isItemSelected = isSelected(row.name);\r\n//                         const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n//                         return (\r\n//                           <TableRow\r\n//                             hover\r\n//                             aria-checked={isItemSelected}\r\n//                             tabIndex={-1}\r\n//                             key={row.name}\r\n//                             selected={isItemSelected}\r\n//                           >\r\n//                             <TableCell\r\n//                               id={labelId}\r\n//                               align=\"center\"\r\n//                               scope=\"row\"\r\n//                               padding=\"none\"\r\n//                             >\r\n//                               {row.name}\r\n//                             </TableCell>\r\n//                             <TableCell align=\"center\">\r\n//                               {row.donated ? row.donated : \"100\"}\r\n//                             </TableCell>\r\n//                             <TableCell align=\"center\">{row.balance}</TableCell>\r\n//                             <TableCell align=\"center\">\r\n//                               {row.project ? row.projects : \"20\"}\r\n//                             </TableCell>\r\n//                             <TableCell align=\"center\">\r\n//                               {/* <button\r\n//                                 data-bs-toggle=\"tooltip\"\r\n//                                 title=\"View Details\"\r\n//                                 className=\"btn\"\r\n//                                 onClick={() => ViewModalOpen(row)}\r\n//                               >\r\n//                                 <FaRegEye />\r\n//                               </button> */}\r\n\r\n//                               <button\r\n//                                 data-bs-toggle=\"tooltip\"\r\n//                                 title=\"Edit\"\r\n//                                 className=\"btn\"\r\n//                                 onClick={() => history.push(\"/edit_doner\", row)}\r\n//                               >\r\n//                                 {/* <FaRegEdit /> */}Home\r\n//                               </button>\r\n//                             </TableCell>\r\n//                           </TableRow>\r\n//                         );\r\n//                       })}\r\n//                   </TableBody>\r\n//                 </Table>\r\n//               </TableContainer>\r\n//               <TablePagination\r\n//                 rowsPerPageOptions={[5, 10, 25]}\r\n//                 component=\"div\"\r\n//                 count={donorList.length}\r\n//                 rowsPerPage={rowsPerPage}\r\n//                 page={page}\r\n//                 pageSize={10}\r\n//                 onPageChange={handleChangePage}\r\n//                 onRowsPerPageChange={handleChangeRowsPerPage}\r\n//                 showLastButton={true}\r\n//                 showFirstButton={true}\r\n//               />\r\n//             </React.Fragment>\r\n//           ) : (\r\n//             \"\"\r\n//           )}\r\n//         </Paper>\r\n//       </div>\r\n//     </>\r\n//   );\r\n// }\r\n\r\n// const headCells = [\r\n//   {\r\n//     id: \"name\",\r\n//     numeric: false,\r\n//     disablePadding: false,\r\n//     label: \"Name\",\r\n//   },\r\n//   {\r\n//     id: \"donated\",\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: \"Donated\",\r\n//   },\r\n//   {\r\n//     id: \"balance\",\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: \"Balance\",\r\n//   },\r\n//   {\r\n//     id: \"projects\",\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: \"Projects\",\r\n//   },\r\n//   {\r\n//     id: \"action\",\r\n//     numeric: true,\r\n//     disablePadding: false,\r\n//     label: \"Action\",\r\n//   },\r\n// ];\r\n"]},"metadata":{},"sourceType":"module"}